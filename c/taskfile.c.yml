version: '3'
includes:
  idf:
    taskfile: "../taskfile.idf.yml"
    internal: true
    dir: '{{.ROOT_DIR}}'
  var:
    taskfile: "../taskfile.var.yml"
    internal: true
vars:
  PROFILES: &profiles [debug, fast, small]
  PROJECTS_OS: &projects_os [1-blinky, 2-motor, 3-pid]
  PROJECTS_BM: &projects_bm [1-blinky-bm, 2-motor-bm, 3-pid-bm]
  PROJECTS: &projects [1-blinky, 1-blinky-bm, 2-motor, 2-motor-bm, 3-pid, 3-pid-bm]
  C_BUILD_TYPE_MAP:
    map:
      debug: Debug
      fast: Release
      small: MinSizeRel
  C_SDKCONFIG_MAP:
    map:
      debug: sdkconfig
      fast: sdkconfig.fast
      small: sdkconfig.small
  C_SDKCONFIG_DEFAULTS_MAP:
    map:
      debug: sdkconfig.defaults
      fast: sdkconfig.defaults;sdkconfig.defaults-fast
      small: sdkconfig.defaults;sdkconfig.defaults-small
  C_BUILD_DIR: "./build/"
  C_ARTIFACTS_DIR: "../artifacts"
tasks:
  # os and bm
  clean:
    cmd: git clean -dffx .
  build-every-profile:
    deps: [build-every-profile-os, build-every-profile-bm]
  build-all:
    requires:
      vars:
        - {name: PROFILE, enum: *profiles}
    deps:
      - task: build-all-os
        vars: {PROFILE: '{{.PROFILE}}'}
      - task: build-all-bm
        vars: {PROFILE: '{{.PROFILE}}'}
  build:
    requires:
      vars:
        - {name: PROJECT, enum: *projects}
        - {name: PROFILE, enum: *profiles}
    vars:
      IS_BM: {ref: '.PROJECT | hasSuffix "-bm"'}
    deps:
      - task: '{{if .IS_BM}}build-bm{{else}}build-os{{end}}'
        vars:
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
  # os
  build-every-profile-os:
    cmds:
      - for: {matrix: {PROFILE: [fast, small]}}
        task: build-all-os
        vars:
          PROFILE: '{{.ITEM.PROFILE}}'
  build-all-os:
    requires:
      vars:
        - {name: PROFILE, enum: *profiles}
    cmds:
      - for: {var: PROJECTS_OS}
        task: build-os
        vars:
          PROJECT: '{{.ITEM}}'
          PROFILE: '{{.PROFILE}}'
  build-os:
    requires:
      vars:
        - {name: PROJECT, enum: *projects_os}
        - {name: PROFILE, enum: *profiles}
    sources: ['{{joinPath .PROJECT "**/*.c"}}']
    generates: ['{{.C_ARTIFACTS_DIR}}/{{.PROFILE}}/{{.PROJECT}}-c']
    cmds:
      - task: configure-os
        vars: {PROFILE: '{{.PROFILE}}'}
      - 'cd {{joinPath .C_BUILD_DIR .PROFILE}} && make {{.PROJECT}}'
      - task: copy-artifact
        vars:
          FILE: '{{joinPath .C_BUILD_DIR .PROFILE "bin" .PROJECT}}'
          PROFILE: '{{.PROFILE}}'
          PROJECT: '{{.PROJECT}}'
    label: 'c:build-os:{{.PROFILE}}:{{.PROJECT}}'
    deps: [toolchain-os]
  configure-os:
    dir: '{{.C_BUILD_DIR}}/{{.PROFILE}}'
    internal: true
    requires:
      vars:
        - name: PROFILE
          enum: *profiles
    vars:
      BUILD_TYPE: '{{.PROFILE | get .C_BUILD_TYPE_MAP}}'
    cmd: cmake -Werror=dev --warn-uninitialized -DCMAKE_BUILD_TYPE={{.BUILD_TYPE}} ../..
  toolchain-os:
    dir: '{{.C_BUILD_DIR}}'
    sources: 
      - ../CMakeLists.txt
      - ../toolchain.cmake
      - ../dependencies/toolchain.cmake
    generates:
      - cross-pi-gcc-14.2.0-0/bin/**/*
      - cross-gcc-14.2.0-pi_0-1.tar.gz
    cmd: cmake .. && make toolchain
    run: once
  # bm
  build-every-profile-bm:
    cmds:
      - for: {matrix: {PROFILE: [fast, small]}}
        task: build-all-bm
        vars:
          PROFILE: '{{.ITEM.PROFILE}}'
  build-all-bm:
    requires:
      vars:
        - {name: PROFILE, enum: *profiles}
    deps:
      - for: {var: PROJECTS_BM}
        task: build-bm
        vars:
          PROJECT: '{{.ITEM}}'
          PROFILE: '{{.PROFILE}}'
  build-bm:
    requires:
      vars:
        - {name: PROJECT, enum: *projects_bm}
        - {name: PROFILE, enum: *profiles}
    vars:
      NAME: '{{index (splitList "-" .PROJECT) 1}}'
      LABEL: 'c:build-bm:{{.PROFILE}}:{{.PROJECT}}'
    deps:
      - task: deps-bm
        vars:
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
      - task: 'var:checksum'
        vars:
          LABEL: '{{.LABEL}}'
          VARS:
            - '{{.WIFI_SSID}}'
            - '{{.WIFI_PASS}}'
            - '{{.REVOLUTION_THRESHOLD_CLOSE}}'
            - '{{.REVOLUTION_THRESHOLD_FAR}}'
    sources: 
      - '{{joinPath .PROJECT "main" "**/*.c"}}'
      - '{{joinPath .VAR_CHECKSUM_DIR .LABEL}}'
    generates:
      - '{{.C_ARTIFACTS_DIR}}/{{.PROFILE}}/{{.PROJECT}}-c'
      - '{{.C_ARTIFACTS_DIR}}/{{.PROFILE}}/{{.PROJECT}}-c.elf'
    cmds:
      - task: cmd-bm
        vars:
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
          CLEAR_SDKCONFIG: true
          CMD: 'build'
      - task: copy-artifact
        vars:
          FILE: '{{joinPath .PROJECT "build" .PROFILE (printf "%s.bin" .NAME)}}'
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
      - task: copy-artifact
        vars:
          FILE: '{{joinPath .PROJECT "build" .PROFILE (printf "%s.elf" .NAME)}}'
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
          SUFFIX: '.elf'
    label: '{{.LABEL}}'
  run-bm:
    requires:
      vars:
        - {name: PROJECT, enum: *projects_bm}
        - {name: PROFILE, enum: *profiles}
    cmds:
      - task: cmd-bm
        vars:
          PROJECT: '{{.PROJECT}}'
          CMD: 'flash monitor'
  deps-bm:
    requires:
      vars:
        - {name: PROJECT, enum: *projects_bm}
        - {name: PROFILE, enum: *profiles}
    sources:
      - '{{joinPath .PROJECT "main" "idf_component.yml"}}'
    cmds:
      - task: cmd-bm
        vars:
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
          CMD: 'update-dependencies'
    run: once
    label: 'c:deps-bm:{{.PROJECT}}'
  cmd-bm:
    internal: true
    requires:
      vars:
        - {name: PROJECT, enum: *projects_bm}
        - {name: PROFILE, enum: *profiles}
    # optional: CLEAR_SDKCONFIG
    vars:
      PROJECT_DIR: '{{joinPath .PROJECT}}'
      SDKCONFIG: '{{.PROFILE | get .C_SDKCONFIG_MAP | default "sdkconfig"}}'
    deps: ['idf:ensure-available']
    cmds: 
      - '{{if .CLEAR_SDKCONFIG}}rm {{joinPath .PROJECT .SDKCONFIG}}{{end}}'
      - |
        sh -c '
          {{.EXPORT_IDF_CMD}}
          cd {{.PROJECT_DIR}} && idf.py \
            --build-dir=build/{{.PROFILE}} \
            -DSDKCONFIG={{.SDKCONFIG}} \
            {{.CMD}}
        '
    env:
      SDKCONFIG_DEFAULTS: '{{.PROFILE | get .C_SDKCONFIG_DEFAULTS_MAP | default "sdkconfig.defaults"}}'
  # utils
  copy-artifact:
    internal: true
    requires:
      vars:
        - FILE
        - PROJECT
        - {name: PROFILE, enum: *profiles}
    vars:
      SUFFIX: '{{.SUFFIX | default ""}}'
      OUTPUT_FILE: '{{.C_ARTIFACTS_DIR}}/{{.PROFILE}}/{{.PROJECT}}-c{{.SUFFIX}}'
    sources: ['{{.FILE}}']
    generates: ['{{.OUTPUT_FILE}}']
    deps:
      - task: artifact-dir-exists
        vars: {PROFILE: '{{.PROFILE}}'}
    cmd: 'cp {{.FILE}} {{.OUTPUT_FILE}}'
    label: 'c:copy-artifact:{{.PROFILE}}/{{.PROJECT}}-c{{.SUFFIX}}'
  artifact-dir-exists:
    requires:
      vars:
        - {name: PROFILE, enum: *profiles}
    internal: true
    cmd: mkdir -p '{{.C_ARTIFACTS_DIR}}/{{.PROFILE}}'
