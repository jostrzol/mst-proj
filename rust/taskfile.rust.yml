version: '3'
includes:
  idf:
    taskfile: "../taskfile.idf.yml"
    internal: true
vars:
  PROFILES: &profiles [debug, fast, small]
  PROJECTS_OS: &projects_os [1-blinky, 2-motor, 3-pid]
  PROJECTS_BM: &projects_bm [0-tune-bm, 1-blinky-bm, 2-motor-bm, 3-pid-bm]
  PROJECTS: &projects [0-tune-bm, 1-blinky, 1-blinky-bm, 2-motor, 2-motor-bm, 3-pid, 3-pid-bm]
  RUST_PROFILE_MAP:
    map:
      debug: dev
      fast: fast
      small: small
  RUST_OPT_FLAGS_MAP:
    map:
      debug:
      fast:
      small: -Zfmt-debug=none -Zlocation-detail=none
  RUST_TRIPLET_OS: "arm-unknown-linux-gnueabihf"
  RUST_TRIPLET_BM: "xtensa-esp32-espidf"
  RUST_ARTIFACTS_DIR: "../artifacts"
  RUST_BUILD_TOOL:
    sh: echo "${RUST_BUILD_TOOL:-cross}"
tasks:
  # os and bm
  clean:
    cmd: git clean -dffx .
  build-every-profile:
    deps: [build-every-profile-os, build-every-profile-bm]
  build-all:
    requires:
      vars:
        - {name: PROFILE, enum: *profiles}
    deps:
      - task: build-all-os
        vars: {PROFILE: '{{.PROFILE}}'}
      - task: build-all-bm
        vars: {PROFILE: '{{.PROFILE}}'}
  build:
    requires:
      vars:
        - {name: PROJECT, enum: *projects}
        - {name: PROFILE, enum: *profiles}
    vars:
      IS_BM: {ref: '.PROJECT | hasSuffix "-bm"'}
    deps:
      - task: '{{if .IS_BM}}build-bm{{else}}build-os{{end}}'
        vars:
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
  # os
  build-every-profile-os:
    cmds:
      - for: {matrix: {PROFILE: [fast, small]}}
        task: build-all-os
        vars:
          PROFILE: '{{.ITEM.PROFILE}}'
  build-all-os:
    requires:
      vars:
        - {name: PROFILE, enum: *profiles}
    cmds:
      - for: {var: PROJECTS_OS}
        task: build-os
        vars:
          PROJECT: '{{.ITEM}}'
          PROFILE: '{{.PROFILE}}'
  build-os:
    requires:
      vars:
        - {name: PROJECT, enum: *projects_os}
        - {name: PROFILE, enum: *profiles}
    sources: ['{{joinPath .PROJECT "**/*"}}']
    generates: ['{{.RUST_ARTIFACTS_DIR}}/{{.PROFILE}}/{{.PROJECT}}-rust']
    vars:
      NAME: '{{index (splitList "-" .PROJECT) 1}}'
      RUST_PROFILE: '{{.PROFILE | get .RUST_PROFILE_MAP}}'
      RUST_OPT_FLAGS: '{{.PROFILE | get .RUST_OPT_FLAGS_MAP}}'
      OUT_DIR: '{{joinPath "target" .RUST_TRIPLET_OS .PROFILE}}'
      RUSTFLAGS: '{{.PROFILE | get .RUST_OPT_FLAGS_MAP}}'
      RUSTFLAGS_CMD: '{{if ne .RUSTFLAGS ""}}RUSTFLAGS="{{.RUSTFLAGS}}"{{end}}'
    cmds:
      - |
        {{.RUSTFLAGS_CMD}} \
        {{.RUST_BUILD_TOOL}} build \
          --package {{.NAME}} \
          --profile={{.RUST_PROFILE}} \
          --target={{.RUST_TRIPLET_OS}}
      - task: copy-artifact
        vars:
          FILE: '{{joinPath .OUT_DIR .NAME }}'
          PROFILE: '{{.PROFILE}}'
          PROJECT: '{{.PROJECT}}'
    label: 'rust:build-os:{{.PROFILE}}:{{.PROJECT}}'
  # bm
  build-every-profile-bm:
    cmds:
      - for: {matrix: {PROFILE: [fast, small]}}
        task: build-all-bm
        vars:
          PROFILE: '{{.ITEM.PROFILE}}'
  build-all-bm:
    requires:
      vars:
        - {name: PROFILE, enum: *profiles}
    deps:
      - for: {var: PROJECTS_BM}
        task: build-bm
        vars:
          PROJECT: '{{.ITEM}}'
          PROFILE: '{{.PROFILE}}'
  run-bm:
    deps: ['idf:ensure-available']
    requires:
      vars:
        - {name: PROJECT, enum: *projects_bm}
        - {name: PROFILE, enum: *profiles}
    vars:
      RUST_PROFILE: '{{.PROFILE | get .RUST_PROFILE_MAP}}'
      RUSTFLAGS: '{{.PROFILE | get .RUST_OPT_FLAGS_MAP}}'
      RUSTFLAGS_CMD: '{{if ne .RUSTFLAGS ""}}RUSTFLAGS="{{.RUSTFLAGS}}"{{end}}'
    cmds:
      - >
        {{.IDF_PATH_CMD}} {{.RUSTFLAGS_CMD}} 
        sh -c 'cd {{.PROJECT}} && cargo run --profile={{.RUST_PROFILE}}'
  build-bm:
    deps: ['idf:ensure-available']
    requires:
      vars:
        - {name: PROJECT, enum: *projects_bm}
        - {name: PROFILE, enum: *profiles}
    sources:
      - '{{joinPath .PROJECT "src/**/*.rs"}}'
      - '{{joinPath .PROJECT "*"}}'
      - exclude: '{{joinPath .PROJECT ".cargo"}}'
      - exclude: '{{joinPath .PROJECT ".embuild"}}'
      - exclude: '{{joinPath .PROJECT "target"}}'
    generates:
      - '{{.RUST_ARTIFACTS_DIR}}/{{.PROFILE}}/{{.PROJECT}}-rust'
      - '{{.RUST_ARTIFACTS_DIR}}/{{.PROFILE}}/{{.PROJECT}}-rust.elf'
    vars:
      RUST_PROFILE: '{{.PROFILE | get .RUST_PROFILE_MAP}}'
      OUT_DIR: '{{joinPath .PROJECT "target" .RUST_TRIPLET_BM .PROFILE}}'
      RUSTFLAGS: '{{.PROFILE | get .RUST_OPT_FLAGS_MAP}}'
      RUSTFLAGS_CMD: '{{if .RUSTFLAGS}}RUSTFLAGS="{{.RUSTFLAGS}}"{{end}}'
    cmds:
      - >
        {{.IDF_PATH_CMD}} {{.RUSTFLAGS_CMD}}
        sh -c 'cd {{.PROJECT}} && cargo build --profile={{.RUST_PROFILE}}'
      - |
        espflash save-image --chip esp32 \
          {{joinPath .OUT_DIR .PROJECT}} \
          {{joinPath .OUT_DIR .PROJECT}}.bin
      - task: copy-artifact
        vars:
          FILE: '{{joinPath .OUT_DIR .PROJECT}}.bin'
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
      - task: copy-artifact
        vars:
          FILE: '{{joinPath .OUT_DIR .PROJECT}}'
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
          SUFFIX: '.elf'
    label: 'rust:build-bm:{{.PROFILE}}:{{.PROJECT}}'
  # utils
  copy-artifact:
    internal: true
    requires:
      vars:
        - FILE
        - PROJECT
        - {name: PROFILE, enum: *profiles}
    vars:
      SUFFIX: '{{.SUFFIX | default ""}}'
      OUTPUT_FILE: '{{.RUST_ARTIFACTS_DIR}}/{{.PROFILE}}/{{.PROJECT}}-rust{{.SUFFIX}}'
    sources: ['{{.FILE}}']
    generates: ['{{.OUTPUT_FILE}}']
    deps:
      - task: artifact-dir-exists
        vars: {PROFILE: '{{.PROFILE}}'}
    cmd: 'cp {{.FILE}} {{.OUTPUT_FILE}}'
    label: 'rust:copy-artifact:{{.PROFILE}}/{{.PROJECT}}-rust{{.SUFFIX}}'
  artifact-dir-exists:
    requires:
      vars:
        - {name: PROFILE, enum: *profiles}
    internal: true
    cmd: mkdir -p '{{.RUST_ARTIFACTS_DIR}}/{{.PROFILE}}'
