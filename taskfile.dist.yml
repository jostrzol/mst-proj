version: '3'
dotenv: [.env, .default.env]
vars:
  LANGS: &langs [c, rust, zig]
  PROJECTS: &projects [1-blinky, 1-blinky-bm, 2-motor, 2-motor-bm, 3-pid, 3-pid-bm]
  PROFILES: &profiles [fast, small, debug]
  LANG_EXT: {map: {c: c, rust: rs, zig: zig}}
  ARTIFACTS_DIR: ./artifacts
  ARTIFACTS_DOCKER_DIR: '{{joinPath .ARTIFACTS_DIR "docker"}}'
  ANALYZE_OUT_DIR: ./analyze/out
  BUILD_IN_DOCKER_STR:
    sh: |
      if test -n "$BUILD_IN_DOCKER"; then 
        echo "$BUILD_IN_DOCKER"
      elif test -n "{{.BUILD_IN_DOCKER}}"; then 
        echo "{{.BUILD_IN_DOCKER}}"
      else
        echo "true"
      fi
  DOCKER: {ref: 'fromJson .BUILD_IN_DOCKER_STR'}
includes:
  c:
    taskfile: ./c/taskfile.c.yml
    dir: ./c
    optional: true
  rust:
    taskfile: ./rust/taskfile.rust.yml
    dir: ./rust
    optional: true
  zig:
    taskfile: ./zig/taskfile.zig.yml
    dir: ./zig
    optional: true
  idf:
    taskfile: ./taskfile.idf.yml
    optional: true
  var:
    taskfile: ./taskfile.var.yml
    optional: true
  lizard:
    taskfile: ./analyze/taskfile.lizard.yml
    optional: true
  plot:
    taskfile: ./analyze/taskfile.plot.yml
    optional: true
  bench:
    taskfile: ./analyze/taskfile.benchmark.yml
    optional: true
  server:
    taskfile: ./server/taskfile.server.yml
    dir: ./server
    optional: true
tasks:
  # Combined build
  build:
    deps: [scenarios-build, server-build]
  clean:
    cmd: git clean -dffx .
  # Test scenarios
  scenarios-build:
    cmds: 
      - task: '{{if .DOCKER}}docker-scenarios-build{{else}}native-scenarios-build{{end}}'
  docker-scenarios-build:
    cmd:
      task: docker-compose
      vars: {CLI_ARGS: 'up scenarios --build'}
  native-scenarios-build:
    deps:
      - c:build-every-profile
      - rust:build-every-profile
      - zig:build-every-profile
  scenarios-3-pid-tune:
    vars:
      BIN_PATH: '{{joinPath .ARTIFACTS_DIR "fast/0-tune-bm-rust.elf"}}'
    cmds:
      - {task: bm-usb-reset}
      - espflash flash --monitor {{.BIN_PATH}}
  scenarios-run:
    requires:
      vars:
        - {name: LANG, enum: *langs}
        - {name: PROJECT, enum: *projects}
        # optional: - {name: PROFILE, enum: *profiles}
    vars:
      IS_BM: {ref: .PROJECT | hasSuffix "-bm"}
      PROFILE: '{{.PROFILE | default "fast"}}'
    cmds:
      - task: '{{if .IS_BM}}scenarios-run-bm{{else}}scenarios-run-os{{end}}'
        vars:
          LANG: '{{.LANG}}'
          PROJECT: '{{.PROJECT}}'
          PROFILE: '{{.PROFILE}}'
  scenarios-run-os:
    internal: true
    requires:
      vars:
        - {name: LANG, enum: *langs}
        - {name: PROJECT, enum: *projects}
        - {name: PROFILE, enum: *profiles}
    vars:
      BIN_NAME: '{{.PROJECT}}-{{.LANG}}'
      BIN_PATH: '{{joinPath .ARTIFACTS_DIR .PROFILE .BIN_NAME}}'
    cmds:
      - ./rpi-run.sh {{.BIN_PATH}}
  scenarios-run-bm:
    internal: true
    requires:
      vars:
        - {name: LANG, enum: *langs}
        - {name: PROJECT, enum: *projects}
        - {name: PROFILE, enum: *profiles}
    vars:
      BIN_NAME: '{{.PROJECT}}-{{.LANG}}.elf'
      BIN_PATH: '{{joinPath .ARTIFACTS_DIR .PROFILE .BIN_NAME}}'
    cmds:
      - {task: bm-usb-reset}
      - espflash flash --monitor {{.BIN_PATH}}
  scenarios-clean:
    deps: [c:clean, rust:clean, zig:clean]
  # PID controller panel (server)
  server-build:
    cmds: 
      - task: '{{if .DOCKER}}docker-server-build{{else}}native-server-build{{end}}'
  docker-server-build:
    cmd:
      task: docker-compose
      vars: {CLI_ARGS: 'up server --build'}
  native-server-build:
    deps: [server:build]
  server-run:
    deps: [server:run]
  # Analysis
  plot:
    deps: ['plot:all']
  # Utils
  bm-monitor:
    cmd: espflash monitor
  bm-usb-reset:
    ignore_error: true
    cmd: sudo usb_modeswitch -v {{.USB_VENDOR}} -p {{.USB_PRODUCT}} --reset-usb
  docker-compose:
    internal: true
    deps: [artifacts-exists]
    cmd: docker-compose {{.CLI_ARGS}}
    env: {UID: '{{.UID}}', GID: '{{.GID}}'}
  artifacts-exists:
    internal: true
    dir: "./artifacts"
